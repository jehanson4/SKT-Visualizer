==================================================================================
ToDo.txt
==================================================================================

[ ] KForFixedKOverN bounds from UI not listening, and picking up values from geometry not control params

[ ] now that we've got buttons for up & down, don't change sign on toggle

[ ] UI indicator for whether we're on or off
    separate from sgn
    so we can know what will happen if we tap

[ ] 2 binary buttons on bottom row
    up/down
    on/off

    let the tapping do whatever, these follow it
    tapping and these back onto same var's so they're always in sync

====================================

---
[ ] FIXME strog retain cycles b/c of listeners
    cf. http://blog.scottlogic.com/2015/02/05/swift-events.html

---
[ ] make the CP steppers fixed stepsize & bounds and don't permit user to change it
    ...maybe on page 2 someday if I feel like it, under "Manual Control"

---
[ ] SIMPLIFY manual stepper & sequencer should share as much as possible

---
Contra: makes the CP params unwieldy; and doesn't help for sequencers that aren't CPs
...which is an important class of 'em

---
[ ] String(10) => \(10)

---
[ ] sequencer params take their initial values from control parameter defaults
    as found at sequencer creation time, but are independent thereafter
    bounds
    stepSize
---
[ ] page 2 has ui section for 'Parameter Defaults'
    INDEPENDENT from sequencer params
    look like CP wigets but have 1 extra nesting for parameter name
    parameter-defaults can be in a scrollview

---
[ ] sequencer numeric controls look like CP widgets

---
[ ] stepsize widget in sequencer controls

---
[ ] when user changes the sequencer, the old one gets sgn=0 and the new one does too

    impl the 2nd inside prepare()?
    no!
    impl it in the caller

[ ] popover scrolling list instead of picker

[ ] instead of PhysicalProperty.type, make an enum. ditto for anything else that uses a "type"

[ ] width of text widget stretches automatically to fix . . . a priority thing?

[ ] show something on startup

[ ] sequencer check status after step

[ ] when sequencer is running the controler parameter text fields all read-only
    deltas and steppers OK

[ ] I think we're looking at the underside of the hemisphere

[ ] app consists of 3 major parts

    1. model (geometry, physics incl. PhysicalProperties)

    2. visualization
    2a. generation (color sources)
    2b. presentation(effects, sequencers, POV, GL settings)

    3. UI (Master, Settings, Display)

The App is in charge at first, but it quickly turns thte job over the the UI.
For the UI to do its job, it needs to get and set things on the model & visualization.

The UI has controls that touch both model & viz.
The viz uses the model pretty heavily.
The model doesn't know about either of these two things.

option 1: layered with viz above model, then UI has hooks into both
in that case, the AppModel contains an SKTModel class and adopts the Viz protocol

option 2: viz and model are peers (sim. to physics & geometry)
in that case, the AppModel contains an SKTModel class and Viz class

Option 2 means there's some code to be put into app model, in order to bind the two together
That same code would look just the same in option 1

I want option 2

--------

[ ] Recursive Embedded Definition
    This idea needs refinement. the definitions are the easy bit.

[ ] sequencers that simulate dynamics of a population of points
    steepest descent
    diffusion

[ ] all the reset / revert mtds return Boolean "changed", so Scene.reset mtds can
    reduce # model change events it fires

[ ] images for the 7 buttons
    reset
    3 for BC
    3 for stepSgn



==================================================================================
ToDo.txt
==================================================================================

[ ] KForFixedKOverN bounds from UI not listening, and picking up values from geometry not control params

[ ] now that we've got buttons for up & down, don't change sign on toggle

[ ] UI indicator for whether we're on or off
    separate from sgn
    so we can know what will happen if we tap

[ ] 2 binary buttons on bottom row
    up/down
    on/off

    let the tapping do whatever, these follow it
    tapping and these back onto same var's so they're always in sync

====================================

[ ] make the CP steppers fixed stepsize & bounds and don't permit user to change it
    ...maybe on page 2 someday if I feel like it, under "Manual Control"

[ ] Consider a much-finer-grained control over which UI controls get touched when something behind them
changes. "N", "k0", etc; things listen for those strings

[ ] SIMPLIFY manual stepper & sequencer should share as much as possible

Contra: makes the CP params unwieldy; and doesn't help for sequencers that aren't CPs
...which is an important class of 'em

[ ] ControlParameter was fun but maybe not worth the complexity.
Esp since I find it useful to have the code know them by name: model.T and so forth.
How about a struct<T> instead that contains every single relevant number I can think of

    NOT QUITE. use a parametrics class that contains a delegate
    PROBLEM is the delegate is a protocol buy it needs to get/set T's

[ ] String(10) => \(10)

[ ] sequencer params take their initial values from control parameter defaults
    as found at sequencer creation time, but are independent thereafter
    bounds
    stepSize

[ ] page 2 has ui section for 'Parameter Defaults'
    INDEPENDENT from sequencer params
    look like CP wigets but have 1 extra nesting for parameter name
    parameter-defaults can be in a scrollview

[ ] sequencer numeric controls look like CP widgets
[ ] stepsize widget in sequencer controls

[ ] CP's clip value to their own bounds

[ ] Int and Double flavors for ControlParameter

[?] generalize ControlParameter so it can be used for sequencers & first-level-parameter defaults

[ ] when user changes the sequencer, the old one gets sgn=0 and the new one does too

    impl the 2nd inside prepare()?
    no!
    impl it in the caller

[ ] decide when it's appropriate to put the value inside the sequencer's bounds
    ? on enable
    ? never

[?] popover scrolling list instead of picker

[ ] set a func whenever bounds changes so I don't have to go thru the switch

[ ] instead of PhysicalProperty.type, make an enum. ditto for anything else that uses a "type"

[ ] width of text widget stretches automatically to fix . . . a priority thing?

[ ] show something on startup

[ ] sequencer check status after step

[ ] when sequencer is running the controler parameter text fields all read-only
    deltas and steppers OK

[ ] BUG reflect flaps if initial is outside range

[ ] I think we're looking at the underside of the hemisphere

[ ] app consists of 3 major parts
    model (geometry, physics incl. PhysicalProperties)
    visualization (color sources)
    presentation(effects, sequencers, POV, GL settings)
    UI (Master, Settings, Display)

    ModelController
    VisualizationController
    PresentationController

    protocol & associated user/listener protocol for each

    MAYBE we can put the control-param deltas & sequencer bounds into Visualization?

[ ] enum for the major app parts
    so a sequencer (or UI control action or etc) can tell the app which kinds of part-change
    might need updating, so the app can send the rignt events its listeners.

    Note the plural

    not enum: use bitmasks or tuples

[ ] a single registerChange method that lets a sender say, "both Visualization and Model have changed"
    etc

[ ] Recursive Embedded Definition

[ ] sequencers that simulate dynamics of a population of points
    steepest descent
    diffusion

[ ] all the reset / revert mtds return Boolean "changed", so Scene.reset mtds can
    reduce # model change events it fires

[ ] images for the 7 buttons
    reset
    3 for BC
    3 for stepSgn



------------------------------------
Support for long-running calculations

1. work items given to BG thread are 100% disconnected from the rest of the app
2. work item is only modified on the BG thread. Ok to leave it in memory as working
    data (don't have to create new one every submission) but only MODIFY it on any other
    thread
3. live data updated only on the main queue

------------------------------------
DESIRED:
--UI responsive always
--UI shows non-invasive spinner while any caclulation is in progress
--Sequencer does not initiate a step until prior calc is done
--Interim results (e.g., partial basins) get displayed if possible
--Any UI control-changes during calc are combined into 1
(User clicks "+" 10 times but only 1 reclc is done)
--anything can ask for any calc to be done anytime

------------------------------------
Design:

Use custom serial DispatchQueue
managed by SKTModel instance

User creates a 'working data' class with clearly defined API to hold a single work item.

Last step on the background queue:
--call SYNC dispatch on the main queue, to copy from working data to live data

I no longer think it's necessary to copy frome working data to a local var in the BG thread
then from local var to live data in the main thread. But if the working data is reused then
it's probably a good idea, if only for code clarity & robustness. (I think it's safe to omit
IF the main-thread copying is done synchronously AND the BG queue is serial. . . . )

// Note the 'async' here
workQueue.async {

    [do some work]

    // Note that it's 'sync' here, not 'async'
    DispatchQueue.main.sync {

    [ copy from working data to live data ]

    }
}


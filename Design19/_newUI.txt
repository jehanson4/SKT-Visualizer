==================================================================================

OPTION: first page is menu page
What are the menu items?

A. 1-pair space, geometry TBD
    [phase diagram?]
    [path graph?]

B. 2-pair hemisphere with colors for fitnese
    1. timeseries movie for given dynamic
    2. sweep movie for given model param

C. 2-pair rectangle in (x,y) with height and color for fitness
    1. timeseries movie for given dynamic
    2. sweep movie for given model param

D. Steve's "path graphs" over a 2-pair sweep: stack of rectangles, cells transparent below fitness threshold or away from peak or etc. A model param varies in Z direction
    1. static pic for given threshold & values of other model params
    [sweep movie for 2nd model param?]

E. 3-pair space, geometry TBD, cells transparent below fitness threshold or away from peak or etc.
    1. timeseries movie for a given dynamic
    2. sweep movie for a given model param

================================
New folders aka groups

App
SystemModel
Graphics
UI
Utilities

================================
AppModel really just has set of systems & load/store defaults

SK2E and SK2D are actually different systems: the 2nd one has nodes etc.

Q: I COULD make it so that they're both the same system but that the nodes
are only created and/or used when necessary.
A: BAROQUE!

Q: OR I could always use the nodes and have 2 passes through them w/ each new frame:
1 pass to set the 'value', 2nd one to read and display it.
A: INEFFICIENT!

================================

I don't need physical property type
I can use the name of a physical property
but the name is a class var not an instance var
like classname
but what do I call it? 'type'?

================================
I *do* need color-source idea. Can't just take a physical property
and colorize it in some generic way, b/c of basin membership

Can have basin membership func's as physical properties. But
we want to view them differently.

So the "visualization" is the right abstraction and it comprises both
quantity being shown and way of showing it.

For each quantity I'm going to pick the way of showing it. So the user
chooses a quantity.

================================
There's a unity about this:

protocol AppPart {
    system: PhysicalSystem { get }
    figures: Selector<Figure> { get }
    sequencers: Selector<Sequencer> { get }
}

=========================================

Figure.prepareToShow:
1. ColorizedFigure -- installs the color source in the effects. COULD do initial calibration too.
2. ShellFigure -- calls prepareToShow on the effects

Effect.prepareToShow:
1. InnerShell -- NOP
2. Axes -- NOP
3. Balls -- NOP
4. Icosahedron -- NOP
5. etc.
The only one that does anything is NodesOnShell, which calls colorsource.prepare

I'm putting all kinds of stuff in draw() -- because I need to keep rebuilding the picture.
There's very little I could do that doesn't need redoing when the system changes.

ColorSource.prepare:
simplecolors: only thing it does is make sure color source is calibrated
    but I couldensure that in Figure.prepareToShow

basin: actually does an update of the basinfinder data
I want that to be done with every draw()
population: actually grabs wCurr from model.

--------------
BOTTOM LINE: I need a method in ColorSource that gets called
right before we do a loop over nodes calling colorAt.

We do a loop over nodes calling colorAt when the colors are stale and we're about to draw.
We do it in order to copy the colors into GL buffer.

In other words: we do prepare-then-loop only when we think colors have changed.

It's not the same as calibrating the colormap. It's not calibrating anything. It's actually
grabbing the data.

However: calibrating may need to be done as well.
Calibration is a rarer event. pepare-then-loop is once per system-change.

System changes and so effect marks colors as stale.
Therefore in next draw we'll do  a prepare-then-colorat.

IFF autocalibration is on then we need to calibrate too.

The name is confusing me. There's several different 'prepare' with different meanings and
usage. Could call it 'update' or 'refresh'

Do we ever want to prepare without also calibrating? yes.

Do we ever want to calibrate without also preparing? no, but that's misleading.

Do we always call prepare in every effect.draw()? no. only when we're copying color data
from the color source into GL

effects monitor changes in system and in the colorSource. But I never really got the colorsource
monitoring stuff right.

effect monitors geometry b/c it needs to completely rebuild
effect doesn't know it should monitor a1 a2 or T -- answer depends on the effect's
color source, which gets replaced when the figure changes

energy, entrop, occupation are 3 diff figures and are defined by color source. They all
share the same base figure.

color source changes basically never. effects get turned off and on.
figures could subscribe to a1 a2 or T. figure also holds color source. but
nodes has a ref. to the color source.

Figure could assume responsibility for telling the effects that they need to do a
prepare-then-colorAt. ColorizedEffect.markColorsStale

--------------
basins color source needs to have its backend rebuild when either geometry of physics changes
backend can get out of sync with frontend
--------------
feature is autocalibrate and it has a color source which it has given to the effect
effect monitors geometry and rebuilds vertices when it changes
also rebuilds colors array and needs to initialize it
they both have same system backend so no sync issues
entropy color source monitors physics, also has same sytem backend
so rebuild of colors array should be OK
and recopy it to GL vertex buffer ditto
but how does autocalibrate work?
would like to NOT have to push autocalibrate var down down down
would prefer NOT to have effects be 'calibrated' -- only color/elevation sources

if we make that a fixed design point what do we end up with?
something still has to know when calibration goes stale, and it depends on
color source AND effect

energy colorsource would have the bounds and have the calibrate but would not watch for
changes in anything.

so I'd need EnergyFeature which could actually BE a color source too if i felt like it

effect.reset:  delete it


---------------------------------
reason I needed effect.defaultEnabled was so that I could re-enable the right ones
in figure.prepareToShow. It's an 'initial enablement'

alt is to have effect.clean get called w/o changing enablement
which may be better I think.
BACK we swing toward ResourceAware.

figure.hasBeenHidden calls effect.clean
figure.clean better name

=================================
basins in sweep over N: need a way to keep the sequencer from advancing
need to add concept of 'drawing of a work in progress'
or sequencer temporary block w/o changing status
it's got a 'busy' concept, maybe there's a way to hook that up.

=================================
use case: it's BasinColors in a sweep over N
    so array length is changing
use case: it's BasinColors in a sweep over a1
    so color values are cnanging
use case: it's BasinColors in a sweep over T
    so nothing is changing


**********************************************
occupation figure could monitor Nka1a2T and lookup autocalibrate and then do the calibration
and then fire change to effect, which could mark its colors array stale. then effect wouldn't
know concept of calibration at all.

colorsources becomes stateless passthru? would color source still need to provide change
monitors?

color sources still need to fire change when calibrated so that
effect can redisplay w/ new colors right away (rather than only when
there's a subsequent model changes or something)
**********************************************

we've got 2 COLOR SOURCES that use the work queue.
AnimationController needs it to check for busy.

=============================================================================================
I'm seeing the Figure as the nexus of customations and special connections.
e.g. occupation figure is what keeps track of all 5 system param changes
e.g. tiny offsets between nodes and descent lines

base-figure is not just some random bag of effects it's specifically tailored for SK2 pictures
of a certain type.

e.g. nodes don't go well w/ relief.

1 base figure with nodes & net but not elevations
1 base figure with surface and net and color and elevation but no nodes

each one exposes all the right things, by name. no more 'let's install the color source everwhere!'

===============================================================================================

Subclasses can add or replace methods in a base class, same as I'm used to; but the
concept of ABC, mixing API w/ impl, is gone.

Delegates are what you use in place of abstract base classes?

Maybe.

So how's it work?

You instantiate the main class, which has a nil delegate whose API contains all the
methods that would have gone into the abstract base class

But what if those are API methods?

NO, I think it's the other way around. The abstract methods stay in the protocol
until the concrete class provides implementations. The concrete class has the
delegate, and the delegate has all the methods that were implemented in the ABC.

ShellDelegate does gestures & POV & manages the effects.

OK.

Then SK2_Base is applied to the energy guy?
No, it provides API that the energy guy uses.
No, it doesn't have to be that way.
I'm so confused!

ALT: Delegates are like the SPI methods I use: they're hooks or callouts. the main guy
calls them at the appropriate times ("about to show..."). But they don't supply any
essential function. The main guy works fine as-is.

That fits with the usages I see.

In that case them ShellFigure w/ its effects might call on a delegate from inside
its own 'about to show' and 'was hidden' -- but the delegate DOES NOT supply any
missing bits of the Figure API.

Which means, Figure is NOT calibrated at all!

The UI calls methods on something that wraps a vanilla ShellFigure or PlaneFigure.
That wrapper has created effects and given them to the figure to draw, but it
has also kept ref's to them. The wrapper is a Calibrated, and it has APIs for
invalidating effects' nodes & data as well

BUT I still think that wrapper needs to impl the Figure protocol, because that's what
we install into the GraphicsController.

G.C. calls:
--about to show
--has been hidden
--draw

UI calls:
--calibrate
--autocalibrate
--Named APIs

Factory calls:
--effects

But none of those guys calls the DATA or NODES methods
or invalidateCalibration either

===================================================================================
Calibrated needs to be its own protocol even so b/c there are two kinds of 'em
--Datasources
--figures





